#include "pch.h"
#include "crc.h"

/* CRC 高位字节值表 */
const unsigned char auchCRCHi[] = {
0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0,
0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41,
0X00, 0xC1, 0x81, 0x40, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0,
0x80, 0x41, 0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1, 0x81, 0x40,
0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1,
0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0, 0x80, 0x41,
0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1,
0x81, 0x40, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41,
0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0,
0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X00, 0xC1, 0x81, 0x40,
0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1,
0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1, 0x81, 0x40,
0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0,
0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X00, 0xC1, 0x81, 0x40,
0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0,
0x80, 0x41, 0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1, 0x81, 0x40,
0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0,
0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41,
0X00, 0xC1, 0x81, 0x40, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0,
0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41,
0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0,
0x80, 0x41, 0X00, 0xC1, 0x81, 0x40, 0X00, 0xC1, 0x81, 0x40,
0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0, 0x80, 0x41, 0X00, 0xC1,
0x81, 0x40, 0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41,
0X00, 0xC1, 0x81, 0x40, 0X01, 0xC0, 0x80, 0x41, 0X01, 0xC0,
0x80, 0x41, 0X00, 0xC1, 0x81, 0x40 /**/
};
/* CRC低位字节值表*/
const unsigned char auchCRCLo[] = {
0X00, 0xC0, 0xC1, 0X01, 0xC3, 0X03, 0X02, 0xC2, 0xC6, 0X06,
0X07, 0xC7, 0X05, 0xC5, 0xC4, 0X04, 0xCC, 0X0C, 0X0D, 0xCD,
0X0F, 0xCF, 0xCE, 0X0E, 0X0A, 0xCA, 0xCB, 0X0B, 0xC9, 0X09,
0X08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
0x43, 0x83, 0x41, 0x81, 0x80, 0x40      /**/
};

/**
* @brief      计算CRC16数据
* @param     puchMsg:需要计算的数据指针
*            usDataLen：数据长度
* @return     返回CRC16结果
* @details
*/

unsigned short Crc16Check(unsigned char* puchMsgp, unsigned short usDataLen)
{
	unsigned char* puchMsg = puchMsgp;//按字节校验
	unsigned char uchCRCHi = 0xFF; /* 高CRC字节初始化 */
	unsigned char uchCRCLo = 0xFF; /* 低CRC 字节初始化 */
	unsigned long uIndex; /* CRC循环中的索引 */
	while (usDataLen--) /* 传输消息缓冲区 */
	{
		uIndex = uchCRCHi ^ *puchMsg++; /* 计算CRC */
		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
		uchCRCLo = auchCRCLo[uIndex];
	}
	uIndex = uchCRCHi;
	uIndex <<= 8;
	uIndex |= uchCRCLo;
	return uIndex;
}


/**
* @brief      计算CRC16数据
* @param     puchMsg:需要计算的数据指针
*            usDataLen：数据长度
* @return     返回CRC16结果
* @details
*/


unsigned short Crc16CheckRealTime(unsigned short vByte)
{
	static unsigned char uchCRCHi = 0xFF; /* 高CRC字节初始化 */
	static unsigned char uchCRCLo = 0xFF; /* 低CRC 字节初始化 */
	static unsigned char u_Index = 0; /* CRC循环中的索引 */
	unsigned short t;
	if (vByte == 0xffff)//Crc初始化
	{
		uchCRCHi = 0xFF; /* 高CRC字节初始化 */
		uchCRCLo = 0xFF; /* 低CRC 字节初始化 */;
		return 0;
	}
	else
	{
		unsigned char uchMsg = (char)vByte;//按字节校;
		uchMsg = (char)vByte;//按字节校;

		u_Index = uchCRCHi ^ uchMsg; /* 计算CRC */
		uchCRCHi = uchCRCLo ^ auchCRCHi[u_Index];
		uchCRCLo = auchCRCLo[u_Index];

		t = uchCRCHi;
		t <<= 8;
		t |= uchCRCLo;
		return t;
	}
}

//static unsigned char crc_t[]={
//0x44,0xA5,0x00,
//0x34,0x03,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x44,0x20,0x48,0x20,0x00,0x00,0x00,0x00,0x54,0x20,0x58,0x20,
//0x5C,0x20,0x60,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//0x7F,0x1F,0xE8,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,
//0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xF7,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x4B,0x35,0x35,0x2D,0x5A,0x34,0x2E,
//0x69,0x00,0x5A,0x4B,0x35,0x35,0x2D,0x5A,0x33,0x4D,0x37,0x2E,0x69,0x00,0x53,0x43,
//0x44,0x2D,0x43,0x32,0x2E,0x49,0x00,0x39,0x30,0x4C,0x2D,0x46,0x43,0x31,0x00,0x39,
//0x30,0x4C,0x2D,0x46,0x43,0x32,0x00,0x00,0x28,0xF7,0x32,0xF7,0x3E,0xF7,0x47,0xF7,
//0x4F,0xF7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
//0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
//0x81,0x40,0x00,0xC0,0xC1,0x01,0xC3,0x03,0x02,0xC2,0xC6,0x06,0x07,0xC7,0x05,0xC5,
//0xC4,0x04,0xCC,0x0C,0x0D,0xCD,0x0F,0xCF,0xCE,0x0E,0x0A,0xCA,0xCB,0x0B,0xC9,0x09,
//0x08,0xC8,0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,
//0x1C,0xDC,0x14,0xD4,0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,0x11,0xD1,
//0xD0,0x10,0xF0,0x30,0x31,0xF1,0x33,0xF3,0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,
//0x34,0xF4,0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,0x3B,0xFB,0x39,0xF9,
//0xF8,0x38,0x28,0xE8,0xE9,0x29,0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,
//0xEC,0x2C,0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,0x22,0xE2,0xE3,0x23,0xE1,0x21,
//0x20,0xE0,0xA0,0x60,0x61,0xA1,0x63,0xA3,0xA2,0x62,0x66,0xA6,0xA7,0x67,0xA5,0x65,
//0x64,0xA4,0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,
//0xA8,0x68,0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,0x7F,0xBF,0x7D,0xBD,
//0xBC,0x7C,0xB4,0x74,0x75,0xB5,0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,
//0x70,0xB0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,0x96,0x56,0x57,0x97,0x55,0x95,
//0x94,0x54,0x9C,0x5C,0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,0x99,0x59,
//0x58,0x98,0x88,0x48,0x49,0x89,0x4B,0x8B,0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,
//0x4C,0x8C,0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,0x43,0x83,0x41,0x81,
//0x80,0x40,0xFF,0xFF,0xCB,0xF8,0x20,0xFE,0x30,0x74,0xF9,0xFC,0x6E,0x06,0x00,0xFC,
//0xF9,0x06,0x00,0x36,0x00,0xF3,0x30,0x18,0xF7,0xEF,0x04,0xCC,0x00,0x00,0xA7,0x47,
//0xDF,0xF9,0x36,0x20,0xFE,0x30,0x20,0xFE,0xEF,0x04,0xCC,0x00,0x00,0xA7,0x47,0xDF,
//0xF9,0x41,0x00,0x32,0x5C,0x02,0xEF,0x08,0xB3,0x11,0x49,0xD8,0x00,0x48,0x18,0xF7,
//0xF6,0x43,0xDF,0xF4,0x41,0x00,0x32,0x00,0x00,0xEF,0x08,0xB3,0x11,0x49,0x80,0x00,
//0x48,0x20,0xFE,0xF6,0x43,0xDF,0xF4,0xFC,0xB2,0x06,0x00,0xF6,0xEF,0xFE,0xC1,0xC5,
//0xC7,0xAF,0x06,0x01,0x60,0x5C,0x07,0x98,0x00,0x88,0x00,0x31,0x8E,0xBF,0x0E,0x01,
//0x88,0x00,0xD1,0x61,0xE8,0x88,0x00,0x8E,0x46,0x98,0x01,0xAF,0x0A,0xF3,0x42,0x08,
//0xF3,0x61,0xD3,0x14,0xEB,0x06,0xF3,0x88,0x01,0x99,0xA2,0x06,0xF3,0xA2,0x08,0xF3,
//0xAF,0x0A,0xF3,0xAF,0x08,0xF3,0xEF,0x02,0x88,0x01,0x10,0x02,0xC4,0xC0,0x61,0xFC,
//0xC1,0xC5,0xAF,0x04,0xF3,0x61,0x68,0xDF,0x04,0xC4,0xC0,0x61,0xFC,0xEB,0x02,0xF3,
//0x89,0x9E,0x44,0xA5,0x15,0xBF,0x02,0xF3,0xB2,0x04,0xF3,0xEF,0xEC,0xFF,0x71,0x10,
//0x90,0x08,0xD7,0x00,0x71,0x18,0x90,0x08,0xD7,0x00,0xC7,0xC5,0xC3,0xC1,0x71,0x20,


//};
//unsigned int pau=122;
//void test(void)
//{
//	unsigned short crc;
//	unsigned short i;
//	Crc16CheckRealTime(0xFFFF);
//	for (i=0;i<1027;i++)
//	{
//		crc=Crc16CheckRealTime(crc_t[i]&0xFF);
//		if (i>=pau)
//		{
//			crc=crc*2;
//		}
//	}
//	crc=Crc16CheckRealTime(0);
//}

unsigned short Crc16_RealTime(unsigned char vByte, unsigned short crc_init)
{
	unsigned char uchCRCHi = crc_init >> 8; /* 高CRC字节初始化 */
	unsigned char uchCRCLo = crc_init & 0xFF; /* 低CRC 字节初始化 */
	unsigned char u_Index = 0; /* CRC循环中的索引 */
	unsigned short t;

	unsigned char uchMsg = (char)vByte;//按字节校;
	uchMsg = (char)vByte;//按字节校;

	u_Index = uchCRCHi ^ uchMsg; /* 计算CRC */
	uchCRCHi = uchCRCLo ^ auchCRCHi[u_Index];
	uchCRCLo = auchCRCLo[u_Index];

	t = uchCRCHi;
	t <<= 8;
	t |= uchCRCLo;
	return t;

}

unsigned short Crc16(unsigned short puchMsgp, unsigned short crc_init)
{
	unsigned t = Crc16_RealTime(puchMsgp >> 8, crc_init);
	t = Crc16_RealTime(puchMsgp & 0xFF, t);
	return t;
}


unsigned short calcks(unsigned char* sBuf, unsigned short iLen)
{
	unsigned short cks = 0;
	while (iLen)
		cks += sBuf[--iLen];
	return cks;
}

unsigned char calxor(unsigned char* sBuf, unsigned short iLen)
{
	unsigned char cks = 0;
	while (iLen)
		cks ^= sBuf[--iLen];
	return cks;
}